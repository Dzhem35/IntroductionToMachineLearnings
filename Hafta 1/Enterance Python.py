# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzBj0wMcC1FX7Rv0UWkR6NL20YEUr2M_
"""

# -*- coding: utf-8 -*-
"""Colaboratory'ye Hoş Geldiniz adlı not defterinin kopyası
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/15XX1AoZj2r3BGu2hUDtBFC0kuVgcWu14
Machine Learning
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns  # visualization tool

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

from subprocess import check_output
print(check_output(["ls", "../content"]).decode("utf8"))

import os
for dirname, _, filenames in os.walk("/content"):
    for filename in filenames:
        print(os.path.join(dirname, filename))

data = pd.read_csv('../content/pokemon.csv')
data.head()

data.info()

data.corr()

#correlation map
f,ax = plt.subplots(figsize=(18, 18))
sns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)
plt.show()

data.head(10)

data.columns

"""Python"""

# Line Plot
# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line
data.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')
data.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')
plt.legend(loc='upper right')     # legend = puts label into plot
plt.xlabel('x axis')              # label = name of label
plt.ylabel('y axis')
plt.title('Line Plot')            # title = title of plot
plt.show()

# Scatter Plot 
# x = attack, y = defense
data.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')
plt.xlabel('Attack')              # label = name of label
plt.ylabel('Defence')
plt.title('Attack Defense Scatter Plot')            # title = title of plot

# Histogram
# bins = number of bar in figure
data.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))
plt.show()

data.Speed.plot(kind = 'hist',bins = 50)
plt.clf()

"""DICTIONARY"""

#dictionary yaratılır ardından spain ve usa key değerlerine value atanır.
dictionary = {'spain' : 'madrid','usa' : 'vegas'}
print(dictionary.keys()) #dictionary içindeki key değerleri print edilir.
print(dictionary.values()) #dictionary içindeki value değerleri print edilir.

dictionary['spain'] = "barcelona"    # key içindeki value değeri güncellenir.
print(dictionary)
dictionary['france'] = "paris"       # yeni bir key değeri eklenir.
print(dictionary)
del dictionary['spain']              # key değeri spain silinir.
print(dictionary)
print('france' in dictionary)        # france değerinin dictionary içinde olup olmadığını kontrol eder ve True/False değeri döndürür.
dictionary.clear()                   # dictionary içindeki herşeyi kaldırır.
print(dictionary)

"""PANDAS"""

data = pd.read_csv('../content/pokemon.csv')

series = data['Defense']        # data['Defense'] = series
print(type(series))
data_frame = data[['Defense']]  # data[['Defense']] = data frame
print(type(data_frame))

# Karşılaştırma operatörleri
print(3 > 2)
print(3!=2)
# Boolean operatörleri
print(True and False)
print(True or False)

# 1 - Pandas data frame'i filtreler
x = data['Defense']>200     # Defense değeri 200'den büyük olan verileri ekrana getirir.
data[x]

data[np.logical_and(data['Defense']>200, data['Attack']>100 )] # Defense değeri 200'den büyük ve Attack değeri 100'den büyük olanları ekrana getirir.

data[(data['Defense']>200) & (data['Attack']>100)] # İki şart sağlanması için "&" değeri kullanılabilir.

"""
WHILE and FOR LOOPS"""

i = 0
while i != 5 : # i değerine 0 atanır ve 5'e eşit olmayana kadar i değeri print edildikten sonra 1 arttırılır.
    print('i is: ',i)
    i +=1
print(i,' is equal to 5')

lis = [1,2,3,4,5] # liste değerlerini for döngüsü kullanarak print edilebilir.
for i in lis:
    print('i is: ',i)
print('')

for index, value in enumerate(lis):
    print(index," : ",value)
print('')

dictionary = {'spain':'madrid','france':'paris'} # dictionary içinde key ve value değerlerini for ile print ettirme yöntemi.
for key,value in dictionary.items():
    print(key," : ",value)
print('')

for index,value in data[['Attack']][0:1].iterrows(): # Pandas için index ve value değerlerini görebiliriz.
    print(index," : ",value)

"""PYTHON DATA SCIENCE TOOLBOX"""

def tuple_ex():
    """ return defined t tuple"""
    t = (1,2,3)
    return t
a,b,c = tuple_ex()
print(a,b,c)

x = 2
def f():
    x = 3
    return x
print(x)      # x = 2 global değişken
print(f())    # x = 3 local değişken

x = 5
def f():
    y = 2*x        # x değeri gloabal değişken olduğu için fonk. içinde bu şekilde kullanılabilir.
    return y
print(f())

# İç içe fonk. tanımlanması
def square():
    """ square fonk. için dönen değer """
    def add():
        """ iki farklı local değişken tanımlanır ve değer ataması yapılır. """
        x = 2
        y = 3
        z = x + y
        return z
    return add()**2
print(square())

"""
DEFAULT and FLEXIBLE ARGUMENTS"""

# default tanımlanan değişken değerleri
def f(a, b = 1, c = 2):
    y = a + b + c
    return y
print(f(5))
# Atanan parametre değerlerini bu şekilde yolladığımzda bu değerler üzerinden işlem görür.
print(f(5,4,3))

# *args parametresi esnek değer olarak adlandırılır.
def f(*args):
    for i in args:
        print(i)
f(1)
print("")
f(1,2,3,4)
# **kwargs değeri dictionary için esnek değerdir.
def f(**kwargs):
    """ print key and value of dictionary"""
    for key, value in kwargs.items():               
        print(key, " ", value)
f(country = 'spain', capital = 'madrid', population = 123456)

"""
LAMBDA FUNCTION"""

# lambda fonksiyonu
square = lambda x: x**2     # x değişken adı olarak gönderilir.
print(square(4))
tot = lambda x,y,z: x+y+z   # x,y,z değişken adı olarak gönderilir.
print(tot(1,2,3))

"""ANONYMOUS FUNCTİON"""

number_list = [1,2,3]
y = map(lambda x:x**2,number_list) # liste içindeki değerlerin karesini aldıran fonk. parçası.
print(list(y))

"""ITERATORS"""

# iterasyon örneği
name = "ronaldo"
it = iter(name)
print(next(it))    # Sonraki iterasyonu print ettirir.
print(*it)         # Kalan iterasyonu print ettirir.

# zip example
list1 = [1,2,3,4]
list2 = [5,6,7,8]
z = zip(list1,list2)
print(z)
z_list = list(z)
print(z_list)

un_zip = zip(*z_list)
un_list1,un_list2 = list(un_zip) # unzip returns tuple
print(un_list1)
print(un_list2)
print(type(un_list2))