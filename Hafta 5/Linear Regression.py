# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eclCG-s-Q4jDcOKcbwFW5dwKDD89-bDn
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("linear-regression-dataset.csv",sep = ";") #df adli degiskene dataset verileri aktarilir

plt.scatter(df.experience,df.salary)
plt.xlabel("experience") #xlabel atanir
plt.ylabel("salary") #ylabel atanir
plt.show()

#%% linear regression
# sklearn library
from sklearn.linear_model import LinearRegression

# linear regression model
linear_reg = LinearRegression()

x = df.experience.values.reshape(14,1) #experience x-label olarak tanimlanmisti values.reshape fonk. kullanarak yeniden sekillendirilmis degeri geri dondurur.
y = df.salary.values.reshape(14,1) #salary y-label olarak tanimlanmisti values.reshapew fonk. ayni sekilde burdada kullanilmaktadir.

linear_reg.fit(x,y) # x ve y degerlerine yaptigimiz atamalari linear_reg degiskenine fit (entegre) ediyoruz.

#%% prediction
import numpy as np

b0 = linear_reg.predict([[0]]) #b0 degiskenine linear_reg'deki 0.indiste bulunan deger .predict() fonk. ile atanir.
print("b0: ",b0)

b0_ = linear_reg.intercept_ # .intercept_ fonk.'u bagimli degiskenin degerini ogrenmek icin kullanilir.
print("b0_: ",b0_)   # intercept the y-axis

b1 = linear_reg.coef_ # .coef_ fonk.'u dataset dataset icerisindeki ozelliklerinin katsayilarini gosterir.
print("b1: ",b1)   # slope

# salary = 1663 + 1138*experience

new_salary = 1663 + 1138*11 #1663 degeri intercept degeridir 1138 ise coef degeridir
print(new_salary) #11 yillik tecrubesi olanlar icin hesaplanmasi sonucunda cevabimiz "14181" olarak gozlenmktedir.

b11 = linear_reg.predict([[11]]) #11 yillik tecrubesi olanlar icin tahmin degerimiz "14185.75,,,,"
print("b11: ",b11)

# visualize line
array = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]).reshape(-1,1)  # experience

plt.scatter(x,y)
plt.show()

y_head = linear_reg.predict(array)  # salary

plt.plot(array, y_head,color = "red")

b100 = linear_reg.predict([[100]]) 
print("b11: ",b100)