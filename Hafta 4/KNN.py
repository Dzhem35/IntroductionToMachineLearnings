# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vUWBS-sRfw5QES4CK-k9s0n0C14OoFnv
"""

# KNN Algorithm
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv("data.csv") #data değişkenine data.csv içerisinden datalar yükleniyor.

# %%
data.drop(["id","Unnamed: 32"],axis=1,inplace=True) #pandas kutuphanesinden yararlanarak table içinde bulunan "id" ve "Unnamed : 32" isimli sütünlar table'dan silinecektir.
data.tail()
# malignant = M  kotu huylu tumor
# benign = B     iyi huylu tumor

# %%
M = data[data.diagnosis == "M"] #Tanımlanan degiskenler (tumor huyları) data icerisinde bulunan diagnosos icerisine tanimlanir.
B = data[data.diagnosis == "B"]
# scatter plot
plt.scatter(M.radius_mean,M.texture_mean,color="red",label="kotu",alpha= 0.3) #plotlib kutuphanesini kullanilarak gorsellestirme saglanir.
plt.scatter(B.radius_mean,B.texture_mean,color="green",label="iyi",alpha= 0.3)
plt.xlabel("radius_mean") 
plt.ylabel("texture_mean")
plt.legend() # garfik icerisinde tanimlanan degiskenleri gorsellestirir.
plt.show()

# %%
data.diagnosis = [1 if each == "M" else 0 for each in data.diagnosis] # each value degeri diagnosis sutunu icerisinde gezinerek "M" degerlerini 1 olmayanlari ise 0 yapar.
y = data.diagnosis.values # 1 ve 0 degerleri y degiskenine atanir.
x_data = data.drop(["diagnosis"],axis=1) # data table'dan diagnosis sutunu drop edilir. inplace degeri default olarak False tanimlanir.

# %%
# normalization 
x = (x_data - np.min(x_data))/(np.max(x_data)-np.min(x_data))

#%%
# train test split   
from sklearn.model_selection import train_test_split  #test ve train modelleri yaratilir.
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)

# %%
# knn model
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 3) # n_neighbors = 3
knn.fit(x_train,y_train)
prediction = knn.predict(x_test)
print(" {} nn score: {} ".format(3,knn.score(x_test,y_test)))

# %%
# find k value
score_list = []
for each in range(1,15): #each degeri 1 ile 15 arasinda degerler alarak donen sonuclari icin grafik olusturulur ve bu grafikten en iyi K value degerini secebiliriz.
    knn2 = KNeighborsClassifier(n_neighbors = each)
    knn2.fit(x_train,y_train)
    score_list.append(knn2.score(x_test,y_test))
    
plt.plot(range(1,15),score_list)
plt.xlabel("k values") # tanimlanan K value degerleri
plt.ylabel("accuracy") # dogruluk oranlari
plt.show()

y_pred = knn2.predict(x_test)
y_true = y_test
#%% confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_true,y_pred) # tanimlanan cm matrisi icerisine predict(beklenen) ve true(gercek dogru) class tanimlamalari yapilir.


# %% cm visualization   # tanimlanan confusion matrisi ekranda gorunteleme adimlari.
import seaborn as sns
import matplotlib.pyplot as plt

f, ax = plt.subplots(figsize =(5,5))
sns.heatmap(cm,annot = True,linewidths=0.5,linecolor="red",fmt = ".0f",ax=ax)
plt.xlabel("y_pred") 
plt.ylabel("y_true") 
plt.show()