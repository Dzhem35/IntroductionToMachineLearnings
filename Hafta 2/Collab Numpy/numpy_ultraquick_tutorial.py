# -*- coding: utf-8 -*-
"""NumPy UltraQuick Tutorial

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/google/eng-edu/blob/master/ml/cc/exercises/numpy_ultraquick_tutorial.ipynb
"""

#@title Copyright 2020 Google LLC. Double-click here for license information.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""# NumPy UltraQuick Tutorial

NumPy is a Python library for creating and manipulating vectors and matrices. This Colab is not an exhaustive tutorial on NumPy.  Rather, this Colab teaches you just enough to use NumPy in the Colab exercises of Machine Learning Crash Course.

## About Colabs

Machine Learning Crash Course uses Colaboratories (**Colabs**) for all programming exercises. Colab is Google's implementation of [Jupyter Notebook](https://jupyter.org/). Like all Jupyter Notebooks, a Colab consists of two kinds of components:

  * **Text cells**, which contain explanations. You are currently reading a text cell.
  * **Code cells**, which contain Python code for you to run. Code cells have a light gray background.

You *read* the text cells and *run* the code cells.

### Running code cells

You must run code cells in order. In other words, you may only run a code cell once all the code cells preceding it have already been run. 

To run a code cell:

  1. Place the cursor anywhere inside the [ ] area at the top left of a code cell. The area inside the [ ] will display an arrow.
  2. Click the arrow.

Alternatively, you may invoke **Runtime->Run all**. Note, though, that some of the code cells will fail because not all the coding is complete. (You'll complete the coding as part of the exercise.)

### If you see errors...

The most common reasons for seeing code cell errors are as follows:

  * You didn't run *all* of the code cells preceding the current code cell.
  * If the code cell is labeled as a **Task**, then:
    *  You haven't yet written the code that implements the task.
    *  You did write the code, but the code contained errors.

## Import NumPy module

Run the following code cell to import the NumPy module:
"""

import numpy as np

import numpy as np

one_dimensional_array = np.array([1.2, 2.4, 3.5, 4.7, 6.1, 7.2, 8.3, 9.5]) #tek boyutlu array tanımlama ve print(array_ismi).
print(one_dimensional_array)

two_dimensional_array = np.array([[6, 5], [11, 7], [4, 8]])#iki boyutlu array tanımlama tipi bu şekilde yapılmaktadır.
print(two_dimensional_array)

sequence_of_integers = np.arange(5, 12) #np.arrange fonk. kullanılarak verilen parametler arasındaki değerler print ile ekrana getirilir.
print(sequence_of_integers)

random_integers_between_50_and_100 = np.random.randint(low=50, high=101, size=(6))#np.random.randint fonk low ve high değerleri arasında random sayı üretir ve verilen size kadar değer ekrana getirir.
print(random_integers_between_50_and_100)

random_floats_between_0_and_1 = np.random.random([6])# 0 ile 1 arasında float sayılardan 6 adet seçer.
print(random_floats_between_0_and_1)

random_floats_between_2_and_3 = random_floats_between_0_and_1 + 2.0 # 0 ile 1 arasından seçilen float sayıların üzerine 2.0 değerini ekler.
print(random_floats_between_2_and_3)

random_integers_between_150_and_300 = random_integers_between_50_and_100 * 3 # 50 ile 100 arasından seçilen değerleri 3 ile çarpar.
print(random_integers_between_150_and_300)

feature=np.arange(6, 21) # np.arange ile 6 ile 20 arasindaki sayialr sirali olarak gelir.
print(feature)
label=np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) # np.array fonk. ile array yaratilir ve icine sayilir atanir.
print(label)